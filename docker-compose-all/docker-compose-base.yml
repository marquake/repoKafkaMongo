version: '3.9'

# docker-compose up -d --no-cache
# docker-compose down
services:

  # ------------------------------------------------------------------------------------------------
  # MONGODB
  # ------------------------------------------------------------------------------------------------
  mongodb:
    image: mongo:latest
    container_name: mongodb
    hostname: mongodb
    volumes:
      - ./mongodb/initdb.d/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
      - ./mongodb-data:/data/db/
      - ./mongodb-log:/var/log/mongodb/
    env_file:
      - .env
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
    ports:
      - "27017:27017"
    networks:
      - mongodb_network

  # ------------------------------------------------------------------------------------------------
  # MONGO EXPRESS
  # ------------------------------------------------------------------------------------------------
  mongo-express:
    image: mongo-express:latest
    container_name: mongo-express
    restart: always
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: ${MONGO_INITDB_ROOT_USERNAME}
      ME_CONFIG_MONGODB_ADMINPASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
      ME_CONFIG_MONGODB_PORT: 27017
      ME_CONFIG_MONGODB_SERVER: 'mongodb'
      ME_CONFIG_BASICAUTH_USERNAME: ${MONGO_EXPRESS_USERNAME}
      ME_CONFIG_BASICAUTH_PASSWORD: ${MONGO_EXPRESS_PASSWORD}
    ports:
      - 8081:8081
    networks:
      - mongodb_network
    depends_on:
      - mongodb

  # ------------------------------------------------------------------------------------------------
  # ZOOKEEPER
  # ------------------------------------------------------------------------------------------------
  zookeeper:
    image: 'bitnami/zookeeper:latest'
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes

  # ------------------------------------------------------------------------------------------------
  # KAFKA
  # ------------------------------------------------------------------------------------------------
  kafka:
    image: 'bitnami/kafka:latest'
    environment:
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - ALLOW_PLAINTEXT_LISTENER=yes
    ports:
      - '9092:9092'
    depends_on:
      - zookeeper

  # ------------------------------------------------------------------------------------------------
  # KAFKA SETUP
  # ------------------------------------------------------------------------------------------------
  kafka-setup:
    image: 'bitnami/kafka:latest'
    depends_on:
      - kafka
    command: >
      bash -c "
        echo Waiting for Kafka to be ready... &&
        sleep 30 &&
        kafka-topics.sh --create --if-not-exists --bootstrap-server kafka:9092 --partitions 1 --replication-factor 1 --topic topic1 &&
        kafka-topics.sh --create --if-not-exists --bootstrap-server kafka:9092 --partitions 1 --replication-factor 1 --topic topic2 &&
        kafka-topics.sh --create --if-not-exists --bootstrap-server kafka:9092 --partitions 1 --replication-factor 1 --topic topic3
      "
  # ------------------------------------------------------------------------------------------------
  # KAFDROP
  # ------------------------------------------------------------------------------------------------
  kafdrop:
    image: 'obsidiandynamics/kafdrop'
    ports:
      - '9008:9000'
    environment:
      - KAFKA_BROKERCONNECT=kafka:9092
    depends_on:
      - kafka


  app-cliente:
    build:
      context: app/app-cliente
      dockerfile: Dockerfile
    depends_on:
      - kafka
      - mongo

  app-repartidor:
    build:
      context: app/app-repartidor
      dockerfile: Dockerfile
    depends_on:
      - kafka
      - mongo

  app-pedido:
    build:
      context: app/app-pedido
      dockerfile: DockerfileC
    depends_on:
      - kafka
      - mongo

  app-aggregate-pedido:
    build:
      context: app/app-aggregate-pedido
      dockerfile: Dockerfile
    depends_on:
      - kafka
      - mongo




# ------------------------------------------------------------------------------------------------
# VOLUMES
# ------------------------------------------------------------------------------------------------
volumes:
  mongodb-data:
    driver: local
    name: mongo-data
  mongodb-log:
    driver: local
    name: mongo-log

# ------------------------------------------------------------------------------------------------
# NETWORKS
# ------------------------------------------------------------------------------------------------
networks:
  mongodb_network:
    driver: bridge
    name: mongo-network
